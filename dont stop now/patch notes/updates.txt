v.0.2.1 - v.0.2.5

--- Level Editor
- Updated to work with the level selector animation

--- Function
- respawn boxes were added and fixed
      - Player respawn has also been added, showing up as lime green. Currently, the respawn for the player colliding with these elements is set to be in the middle of them. Adding respawns needs to be done in a "self.respawn_zones" list within each level "level_render" class function. The new respawn feature could be seen in the "Mind the Gap" level, or what it's currently set to.
- level selector has been added but needs the animation to be fixed
- memory updating using both times passed and victory counter
      - The memory is updated first before any scenes are updated/checked (if statement is put before scene methods). The memory update is only called when the level is complete (victory counter and time passed) before changing scenes, which will update the victory counter to not update more than once. This is a part of fixing the memory update bug occurring more than once 
- time passed function added
      - this was in dsn_editor (private) v.0.0.3, wherein pygame.time was used as a counter and measurer to prevent drawing objects outside of the world boundaries (1080,576) screen size
      - Allowed for block sizes to be moved faster and quicker across the screen when WASD keys were being held saving time for level creation.

--- Levels 
- ~12 more levels are being added and spawn were saved in issues

--- Additional Features
- dns_levels will be transformed into analyzing levels from notepad to reduce size and space and faster rendering of the level
- most levels have been tested and added
- dsn_lvl_editor has had a few changes in formatting and coloring (for now - more to come)

==========

v.0.2.0

---Render
- Fixed level text being in front of pause/win text.

- Player rendering has been temporarily put in the render_text functions. The player will still be rendered behind the text but will be in front of level elements. In the future, this function could be renamed to "render_over", as in rendering over the elements. This is an important change for rendering the player above the respawn block.

--- Gravity
- Fixed gravity counter (amplification) not resetting when respawning. This issue was obvious when the player respawns were set in the air above the platforms.

--- New Function
- Player respawn has also been added, showing up as lime green. Currently, the respawn for the player colliding with these elements is set to be in the middle of them.
- Adding respawns needs to be done in a "self.respawn_zones" list within each level "level_render" class function. 
- The new respawn feature could be seen in the "Mind the Gap" level, or what it's currently set to.

=================

v.0.1.7 - v.0.19

--- Levels
- 6 new levels have been added to the game

---Collision
- Fixed collision of the square bumping into the left and right sides. 
- Also fixed the collision detecting the square going inside of the platform :)
- Updated collision logic to use hitboxes above, below, and beside the player. Bottom hitboxes are used to obtain the distance between the player and the bottom platform and ensure the player square doesn't go into the platform. If the gravity adding onto the player square's y value exceeds the y position of the platform, then the square's y value will be on top of the platform (platform y position + the square's height).
- Minor changes include the self.direction being more involved in moving x as an integer (-1 or +1) rather than a boolean. You'll see that there's one less if statement for moving the x position, as it uses the self.direction instead of two if statements for +1 or -1.
- Fixed an if statement that was over-indented in gravity (gravity counter)

---Player
- Changed self.player.direction to match with the new dsn_class update

---Additional Features
- updated readme
- guidelines for making the game is removed
- level editor made on a different repository and is being used for future level-making

=================

v.0.1.4 - v.0.1.6

--- Rendering
- fps changed form 500 to 240
- self.draw list was added for level effects to make the game more visually interesting

--- Memory
- Main was changed to have memory and record data
- Added function to the Memory class in main and in the Levels and level_id to Scene. Levels with id lesser than -1 are invalid levels (such as filler, or options/credits in the future)
- the data will only be recorded for levels once it has been beaten

---- Level Making
- mouse, candles, and block maze 5 levels were created and added
- Level ID is also used to track the player's level progress by adding the most recently played game to it's dictionary 

--- Menu Scene
- menu scene has been updated with optional choices that the player can choose
- Changed pause + quit (with q) to set self.run_scene to False instead of closing game to avoid crashing
- altered main to complement these changes, allowing the game to be closed (not scene.run_scene) with a button press (in the levels) while the game is still running (self.running)
- MenuScene now has a jump counter, but doesn't have a death counter (as you cannot die in the menu, yet)

--- Square Me (class)
- held jumps glitch was fixed (player always started off jumping which was not intended)
- SquareMe (square player) class has an additional jumps statistic to complement the memory class. This jumps variable is apart of the dsn_levels bug fix in holding jumps.
- Added win boxes after walls/platforms to make it visible, as gaps weren't left for them to be rendered. Key up (arrow) was added as a possible key to start the level

----- Collision Update
- collision of bouncing bewteen boxes been resolved through both collision logic in code and replacing them with either blocks and removing the walls
- frame rate changed for collision logic to be consistent

---- Additional informaiton
- filler options have been added for the menuscene as settings and level-select hasn't been implented into the code yet
- Both are still inefficient processes as the menu is always recording and updating, and the levels have a burst in recording data (during the level transition). There was an additional bug fix where the player would sink into the platform for each bounce it did. This update is in addition to dsn_class and dsn_level v.0.1.6.

==============

v.0.1.3
---- Levels
- all tutorials levels have been added and 1 easy level has been added
- levels have been split into 4-5 major sections; tutorial, easy, hard, night, gravity
- improved gravity and removed jumping instantouely in the start glitch

---- Additional informaiton
- each level has its oown themes for music, so we will have to fix that accordingly
- already set it up so each level will have it's own theme, we just need to have those made and ready. Currently, all the tutorial levels are playing level-loop1 and the main menu is playing the main menu music

==============

v.0.1.2
---- File
- main.py has been split into 3 major files (main.py, dsn_class.py, dsn_levels.py) for ease of editing and reading for other coders and viewers

---- Additional informaiton
- each level has its oown themes for music, so we will have to fix that accordingly
- already set it up so each level will have it's own theme, we just need to have those made and ready. Currently, all the tutorial levels are playing level-loop1 and the main menu is playing the main menu music

==============

v.0.1.1
---- Level Making
- 2 extra levels have been added

---- Menu Scene
- quiting option has been made
- More details have been addded for quiting and unpausing

---- Music
- sfx for jumping has been added
- music has been added and updated to work

---- Text
- more texts have been written onto levels

==============

v.0.0.5 and v.0.0.6
----- Level Making
- very crude level making
- platforms originally had only top and side collision, but now have bottom collision
- walls only have side collision
- it might be better in the future to only use platforms and rename them to blocks

----- Collision Update
- the collision is now dependent on collidelistall to get all collisions happening on that frame. this is useful for detecting instances of multiple collisions at once and having the square respond to them

----- MenuScene Redfined
- MenuScene is now a child class of LevelScene, but with altered functionality. It doesn't use any of the square controls, as the square is made to move and jump by itself.
- In the future, a menu title splash and options need to be implemented.

=======

v.0.0.4 
----- Death, Victory and Respawning
- death zones were added in the SquareMe class to determine if a collision occur and will cause the player to unalive if in contact. These zones are rendered in red. Death zones are also implemented in the LevelClass, as defined below.
- on start or whenever the player square dies, it will be placed into it's defined spawning location and be frozen in place. Furthermore, the square will wait for the player to press the jump button ("w" or "space") to initiate movement again.
- victory/win zones were added in the LevelClass to detect if the square collided with the zone to win the level. A text animation was added playing "don't stop now" sequentially to indicate that the player won. The player also freezes up too to stop movement as the level ended.

----- LevelScene and TutorialLevel
- LevelScene and TutorialLevel are their own separate classes. More specifically, TutorialLevel is the child class of LevelScene. All future levels will be made using LevelScene as the parent. LevelScene contains all the required logic for this game to function, including death, respawn, pausing/freezing the game, square movement and collision detection. Therefore, every level will be it's child class, using the parent's init, input and update (still need to be defined). The parent's render function is also used in the child's render function but will have additional rendering for death, win, platform and wall zones. Every level child class will have a different render function, defining the different level arrangements/layouts.

----- Additional Information
- in the future, text needs to be added
- a menu screen is also needed too with it's options.
- bug hunting for the collision, as it seems to work fine in the TutorialLevel.
- apologies for the delay in updates

=======

v.0.0.3
----- LevelScene
- in the __init__ function:
  - Defined the scene, then the necessary level elements such as platforms/walls, death_zones and win_zones
  - Also defined the player
- Input function updated to include changing between the menu and level scene with "c" and the purple squares jump ability with "w" or "space"
- Update function has purple square movement and collision functions
- Render function for the walls/platforms and the player

----- SquareMe Class
- in the __init__ function:
  - the first block of code describes the basic parameters of the square (passed through the SquareMe class when created), and it's rendering (render object, alive status and freeze)
  - the freeze feature is planned to be used for when players want to pause their game
  - the second block of code describes the purple square characteristics such as jumping, gravity, movement direction, and collision
  
- jump function describing the vertical jump movement (only up)
- collision function describing:
  - collide_id and the touching rectangles parameters if applicable are defined, which are used to make the code shorter and neater.
  - the first set of if's describe collision with the sides of the platform.   - both left and right are detected by seeing the x position of the block relative to the platform/wall
  -the second set of if's describe if the purple block is on the platform or not, which will decide if gravity and jumping ability is enabled

----- Additional Information
- what to expect in the next update:
  - death zones and end zones to be implemented as red and cyan areas respectively
  - player death and respawn positioning
  - fixing a bug where the player spawns inside of a platform (player respawn positioning)
  - going in between multiple levels
  - pause feature (freeze)

=======

v0.0.2
----- Changes to Main 
- added a Scene class describing the basic functions required in each scene. These are input (key inputs that are pressed and/or held), update (used to dynamically rewrite any values during a certain condition) and render (for loading the graphics)
- altered the Program class to incorporate the Scene class and it's functions (input, update and render)
- completed the while game loop in the Program class, but could be altered in the future for more variables if needed.
- rearranged static program class variable into the if __name == "__main__" condition
- added a Menu (MenuScene subclass of Scene) that's still a work in progress
- added a Level (LevelScene subclass of Scene) that's still a work in progress
- both Menu and Level currently renders two different colors, purple and white, by pressing "w".
- the window size is set at 640 by 480 (width and height respectively)

----- Additional Information
- This is a temporary version used to ensure that the program is able to:
  - run the game loop without any problems
  - is able to be closed (currently with the top right X)
  - responds to key presses ("w" to change the background)
  - incorporate both the Program class and Scene classes together
- The Scene classes were made with the help of: https://nerdparadise.com/programming/pygame/part7 
- The base "Scene class" contains the functions that all scenes should have, such as input, render and update. The subclasses in addition to the base functions, add their own unique functions depending on what that scene is used for. For instance, the MenuScene class would have a functions allowing the player to select certain conditions (play, credits, options).

=======

v0.0.1
- if you see this make any update comments here above by creating a new version number by following the trend (yes it's stupid rn, cuz I have no idea how they do version update and trends - its on my to-do list)

=======

v0.0
- file and gaming code was just created
