v.0.1.2
---- File
- main.py has been split into 3 major files (main.py, dsn_class.py, dsn_levels.py) for ease of editing and reading for other coders and viewers

---- Additional informaiton
- each level has its oown themes for music, so we will have to fix that accordingly

==============

v.0.1.1
---- Level Making
- 2 extra levels have been added

---- Menu Scene
- quiting option has been made
- More details have been addded for quiting and unpausing

---- Music
- sfx for jumping has been added
- music has been added and updated to work

---- Text
- more texts have been written onto levels

==============

v.0.0.5 and v.0.0.6
----- Level Making
- very crude level making
- platforms originally had only top and side collision, but now have bottom collision
- walls only have side collision
- it might be better in the future to only use platforms and rename them to blocks

----- Collision Update
- the collision is now dependent on collidelistall to get all collisions happening on that frame. this is useful for detecting instances of multiple collisions at once and having the square respond to them

----- MenuScene Redfined
- MenuScene is now a child class of LevelScene, but with altered functionality. It doesn't use any of the square controls, as the square is made to move and jump by itself.
- In the future, a menu title splash and options need to be implemented.

=======

v.0.0.4 
----- Death, Victory and Respawning
- death zones were added in the SquareMe class to determine if a collision occur and will cause the player to unalive if in contact. These zones are rendered in red. Death zones are also implemented in the LevelClass, as defined below.
- on start or whenever the player square dies, it will be placed into it's defined spawning location and be frozen in place. Furthermore, the square will wait for the player to press the jump button ("w" or "space") to initiate movement again.
- victory/win zones were added in the LevelClass to detect if the square collided with the zone to win the level. A text animation was added playing "don't stop now" sequentially to indicate that the player won. The player also freezes up too to stop movement as the level ended.

----- LevelScene and TutorialLevel
- LevelScene and TutorialLevel are their own separate classes. More specifically, TutorialLevel is the child class of LevelScene. All future levels will be made using LevelScene as the parent. LevelScene contains all the required logic for this game to function, including death, respawn, pausing/freezing the game, square movement and collision detection. Therefore, every level will be it's child class, using the parent's init, input and update (still need to be defined). The parent's render function is also used in the child's render function but will have additional rendering for death, win, platform and wall zones. Every level child class will have a different render function, defining the different level arrangements/layouts.

----- Additional Information
- in the future, text needs to be added
- a menu screen is also needed too with it's options.
- bug hunting for the collision, as it seems to work fine in the TutorialLevel.
- apologies for the delay in updates

=======

v.0.0.3
----- LevelScene
- in the __init__ function:
  - Defined the scene, then the necessary level elements such as platforms/walls, death_zones and win_zones
  - Also defined the player
- Input function updated to include changing between the menu and level scene with "c" and the purple squares jump ability with "w" or "space"
- Update function has purple square movement and collision functions
- Render function for the walls/platforms and the player

----- SquareMe Class
- in the __init__ function:
  - the first block of code describes the basic parameters of the square (passed through the SquareMe class when created), and it's rendering (render object, alive status and freeze)
  - the freeze feature is planned to be used for when players want to pause their game
  - the second block of code describes the purple square characteristics such as jumping, gravity, movement direction, and collision
  
- jump function describing the vertical jump movement (only up)
- collision function describing:
  - collide_id and the touching rectangles parameters if applicable are defined, which are used to make the code shorter and neater.
  - the first set of if's describe collision with the sides of the platform.   - both left and right are detected by seeing the x position of the block relative to the platform/wall
  -the second set of if's describe if the purple block is on the platform or not, which will decide if gravity and jumping ability is enabled

----- Additional Information
- what to expect in the next update:
  - death zones and end zones to be implemented as red and cyan areas respectively
  - player death and respawn positioning
  - fixing a bug where the player spawns inside of a platform (player respawn positioning)
  - going in between multiple levels
  - pause feature (freeze)

=======

v0.0.2
----- Changes to Main 
- added a Scene class describing the basic functions required in each scene. These are input (key inputs that are pressed and/or held), update (used to dynamically rewrite any values during a certain condition) and render (for loading the graphics)
- altered the Program class to incorporate the Scene class and it's functions (input, update and render)
- completed the while game loop in the Program class, but could be altered in the future for more variables if needed.
- rearranged static program class variable into the if __name == "__main__" condition
- added a Menu (MenuScene subclass of Scene) that's still a work in progress
- added a Level (LevelScene subclass of Scene) that's still a work in progress
- both Menu and Level currently renders two different colors, purple and white, by pressing "w".
- the window size is set at 640 by 480 (width and height respectively)

----- Additional Information
- This is a temporary version used to ensure that the program is able to:
  - run the game loop without any problems
  - is able to be closed (currently with the top right X)
  - responds to key presses ("w" to change the background)
  - incorporate both the Program class and Scene classes together
- The Scene classes were made with the help of: https://nerdparadise.com/programming/pygame/part7 
- The base "Scene class" contains the functions that all scenes should have, such as input, render and update. The subclasses in addition to the base functions, add their own unique functions depending on what that scene is used for. For instance, the MenuScene class would have a functions allowing the player to select certain conditions (play, credits, options).

=======

v0.0.1
- if you see this make any update comments here above by creating a new version number by following the trend (yes it's stupid rn, cuz I have no idea how they do version update and trends - its on my to-do list)

=======

v0.0
- file and gaming code was just created
